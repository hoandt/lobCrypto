  const prepareChart = (chart, data) => {
    let candleSeries = chart.addCandlestickSeries();

    candleSeries.setData(data);

    let lastClose = data[data.length - 1].close;
    let lastIndex = data.length - 1;

    let targetIndex = lastIndex + 105 + Math.round(Math.random() + 30);
    let targetPrice = getRandomPrice();

    let currentIndex = lastIndex + 1;
    let currentBusinessDay = { day: 29, month: 5, year: 2019 };
    let ticksInCurrentBar = 0;
    let currentBar = {
      open: null,
      high: null,
      low: null,
      close: null,
      time: currentBusinessDay,
    };

    function mergeTickToBar(price) {
      if (currentBar.open === null) {
        currentBar.open = price;
        currentBar.high = price;
        currentBar.low = price;
        currentBar.close = price;
      } else {
        currentBar.close = price;
        currentBar.high = Math.max(currentBar.high, price);
        currentBar.low = Math.min(currentBar.low, price);
      }
      candleSeries.update(currentBar);
    }

    function reset() {
      candleSeries.setData(data);
      lastClose = data[data.length - 1].close;
      lastIndex = data.length - 1;

      targetIndex = lastIndex + 5 + Math.round(Math.random() + 30);
      targetPrice = getRandomPrice();

      currentIndex = lastIndex + 1;
      currentBusinessDay = { day: 29, month: 5, year: 2019 };
      ticksInCurrentBar = 0;
    }

    function getRandomPrice() {
      return 10 + Math.round(Math.random() * 10000) / 100;
    }

    function nextBusinessDay(time) {
      let d = new Date();
      d.setUTCFullYear(time.year);
      d.setUTCMonth(time.month - 1);
      d.setUTCDate(time.day + 1);
      d.setUTCHours(0, 0, 0, 0);
      return {
        year: d.getUTCFullYear(),
        month: d.getUTCMonth() + 1,
        day: d.getUTCDate(),
      };
    }

    setInterval(function () {
      let deltaY = targetPrice - lastClose;
      let deltaX = targetIndex - lastIndex;
      let angle = deltaY / deltaX;
      let basePrice = lastClose + (currentIndex - lastIndex) * angle;
      let noise = 0.1 - Math.random() * 0.2 + 1.0;
      let noisedPrice = basePrice * noise;
      mergeTickToBar(noisedPrice);
      if (++ticksInCurrentBar === 5) {
        // move to next bar
        currentIndex++;
        currentBusinessDay = nextBusinessDay(currentBusinessDay);
        currentBar = {
          open: null,
          high: null,
          low: null,
          close: null,
          time: currentBusinessDay,
        };
        ticksInCurrentBar = 0;
        if (currentIndex === 5000) {
          reset();
          return;
        }
        if (currentIndex === targetIndex) {
          // change trend
          lastClose = noisedPrice;
          lastIndex = currentIndex;
          targetIndex = lastIndex + 5 + Math.round(Math.random() + 30);
          targetPrice = getRandomPrice();
        }
      }
    }, 1200);
  };